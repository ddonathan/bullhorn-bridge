name: Manual Publish to npm

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (X.Y.Z format)'
        required: true
        type: string
      dry-run:
        description: 'Perform a dry run without publishing'
        required: false
        type: boolean
        default: false

concurrency:
  group: publish-${{ github.event_name }}-${{ github.ref || github.event.release.tag_name || inputs.tag }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  publish:
    name: Test, Build, and Publish
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: npm-publishing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies (clean)
        run: npm ci

      - name: Determine package version
        id: vars
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          fi
          
          NAME=$(node -p "require('./package.json').name")
          PKG=$(node -p "require('./package.json').version")
          
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "pkg=$PKG" >> $GITHUB_OUTPUT
          echo "dry_run=${{ inputs.dry-run }}" >> $GITHUB_OUTPUT
          echo "Detected name: $NAME | version: $VERSION | package.json: $PKG"

      - name: Verify version matches package.json
        if: steps.vars.outputs.dry_run != 'true'
        shell: bash
        run: |
          VERSION='${{ steps.vars.outputs.version }}'
          PKG='${{ steps.vars.outputs.pkg }}'
          
          if [ -z "$VERSION" ]; then
            echo "No version provided or detected." >&2
            exit 1
          fi
          
          if [ "$VERSION" != "$PKG" ]; then
            echo "Error: Provided version ($VERSION) must match package.json version ($PKG)." >&2
            echo "Please update package.json first or provide the correct version." >&2
            exit 1
          fi
          
          echo "‚úÖ Version validation passed: $VERSION"

      - name: Run tests
        run: npm test --silent

      - name: Build
        run: npm run build:simple --silent

      - name: Check if version already published
        id: published
        shell: bash
        run: |
          NAME='${{ steps.vars.outputs.name }}'
          PKG='${{ steps.vars.outputs.pkg }}'
          if npm view "$NAME@$PKG" version > /dev/null 2>&1; then
            echo "already=true" >> $GITHUB_OUTPUT
            echo "$NAME@$PKG already exists on npm. Skipping publish."
          else
            echo "already=false" >> $GITHUB_OUTPUT
            echo "$NAME@$PKG not found on npm. Will publish."
          fi

      - name: Publish to npm (Dry Run)
        if: steps.vars.outputs.dry_run == 'true'
        run: |
          echo "üîç DRY RUN MODE - Not actually publishing"
          npm publish --dry-run

      - name: Publish to npm
        if: steps.published.outputs.already != 'true' && steps.vars.outputs.dry_run != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --provenance --access public

      - name: Done (no publish needed)
        if: steps.published.outputs.already == 'true'
        run: echo 'Nothing to do: version already on npm'
